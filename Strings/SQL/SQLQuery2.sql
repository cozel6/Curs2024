CREATE TABLE CinemaGOUSE Cinema;GO-- Create Director's tableCREATE TABLE Director (	Id INT PRIMARY KEY IDENTITY(1, 1),	FirstName NVARCHAR(50) NOT NULL,	LastName NVARCHAR(50) NOT NULL,	Nationality NVARCHAR(50),	BirthDate DATE);GO--ALTER TABLE Director --ADD Gendre BIT--ALTER TABLE Director --DROP COLUMN Gendre-- Insert data into Director tableINSERT INTO Director (FirstName, LastName, Nationality, BirthDate)VALUES ('Christopher', 'Nolan', 'British-American', '1970-07-30'),('Quentin', 'Tarantino', 'American', '1963-03-27'),('Steven', 'Spielberg', 'American', '1946-12-18'),('Martin', 'Scorsese', 'American', '1942-11-17'),('Ridley', 'Scott', 'British', '1937-11-30');GOSELECT * FROM Director-- Select record with id 3SELECT * FROM DirectorWhere Id = 3-- UPDATE RECORD id no 3UPDATE Director SET Nationality = Nationality + 'Uptdated'where Id = 3INSERT INTO Director (FirstName, LastName, Nationality, BirthDate)VALUES ('Toma', 'Caragiu', 'Romanian', '1979-07-30')delete Director where FirstName = 'Toma'SELECT * FROM Director--DROP DATABASE CinemaSELECT (7+2) / 2 -- operatii aritmeticeUSE Cinema;SELECT Rating , Rating + 0.5FROM MovieSELECT * FROM Movie--concatenareSELECT FirstName, LastName + ' ' + FirstName AS  [Full Name]FROM Actor-- literali to concatenate dataSELECT Movie.Title + ' is ' + Director.LastName + '''s movie'  as [Director's Movie]FROM Director inner join Movie ON Director.Id = Movie.Id--LOGICAL OPERATOR OR AND NOT SELECT *FROM MovieWHERE Rating >= 8.5AND Duration < 200AND Title LIKE 'I%'--AND DirectorID NOT IN (1,2)SELECT FirstName + ' ' + LastName AS FullNameFROM DirectorWHERE YEAR(BirthDate) <= 1950--Group function--countSELECT COUNT(*) FROM Moviewhere Rating > 8 --AVG SUMSELECTMIN(Duration) [MIN],MAX(Duration) [MAX], AVG(Duration) [AVG],SUM(Duration) [SUM]FROM Movie-- DISPLAY Actor's name in order using minSELECT TOP 1 LastNameFROM ActorORDER BY 1 ASCSELECT MIN(LastName)FROM Actor--GROUP BY SELECT a.LastName AS ActorName, COUNT(*) as [Number of Movies]FROM Movie mJOIN MovieActor ma ON ma.MovieId = m.IdJOIN Actor a ON a.Id = ma.ActorIdGROUP BY a.LastName-- Create a view taht will display all the movie titles the directors' firts name and last name--def viewCREATE VIEW MovieDirectorViewASSELECT m.Title, d.FirstName , d.LastNameFROM Movie MINNER JOIN Director d ON m.DirectorID = d.Idselect * from MovieDirectorView--functionsCREATE OR ALTER FUNCTION GetAverageForDirector(	@DirectorID INT)RETURNS DECIMAL(3,1)ASBEGIN		--Function body		--declare var	DECLARE @AverageRating DECIMAL(3,1);	SELECT @AverageRating = AVG(Rating)	FROM Movie m inner join Director d ON m.DirectorID = d.Id	WHERE DirectorID = @DirectorID 		RETURN ISNULL(@AverageRating, 0); --REturn 0 if there are no movies for the given directoryEND;-- usage of functionSELECT dbo.GetAverageForDirector(1) AS AverageRtingForDirector1;--TRIGGERS CREATE TABLE MovieHistory(	Id INT PRIMARY KEY IDENTITY(1,1),	Message NVARCHAR(100) NOT NULL);CREATE OR ALTER TRIGGER trg_AfterMoiveUpdateON MovieAFTER UPDATEASBEGIN	--var 	DECLARE @Message NVARCHAR(100), @MovieId INT , @OldRating DECIMAL(3,1), @NewRating DECIMAL(3,1);		SELECT @MovieId = i.Id , @OldRating = d.Rating, @NewRating = i.Rating	FROM inserted i	JOIN deleted d ON i.Id = d.Id	-- assign value	SET @Message = 'Movie wiht Id ' + CAST(@MovieId AS nvarchar(10))+ 'hat it ''rating changed from ' + CAST(@OldRating as nvarchar(10)) + ' to '	+ cAST(@NewRating AS nvarchar(10));	--TRIGER BODY	INSERT INTO MovieHistory(Message)	VALUES (@Message);END;--beforeselect * from Movie where Id = 1select * from MovieHistory;--afterUPDATE MovieSET Rating = 7.6WHERE Id = 1--beforeselect * from Movie where Id = 1select * from MovieHistory;--PROCEDURI STOCATECREATE PROCEDURE IncrementMovieRating	@MovieID INTASBEGIN	IF EXISTS (SELECT Id FROM Movie WHERE Id = @MovieID)	begin		update Movie		set Rating = Rating + 1		where Id = @MovieID	END	ELSE	BEGIN				RAISERROR ('Movie with id  %d does not exist.' , 16 , 1 , @MovieID);	ENDEND;EXEC IncrementMovieRating @MovieID = 1